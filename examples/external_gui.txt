====== External GUI C# ======
<WRAP center round alert 60%>Update in progress: Updating samples and files to SGCT 1.5+ [2013-06-11]</WRAP>

This tutorial will demonstrate how to create an external GUI in C# and control an SGCT application. C# is suitable for rapid GUI development and this sample will show its simplicity. The SGCT application is based on the spinning triangle example and will act as a server. The C# remote application will act as a client. The communication will be unidirectional and data will only be sent from the remote application to the SGCT application using TCP.
\\  
\\ 
Files: {{:develop:sgcttutorials:sgctremote.zip|C# 2010 project}} //2012-08-23 23:12//
\\ 

{{:develop:sgcttutorials:external_gui_csharp_example.png?direct&|}}\\
\\ 
==== Step 1 ====
If you don't have Microsoft Visual Studio Professional 2010 or Microsoft Visual Studio C# Express 2010 then download Microsoft Visual Studio C# Express 2010 [[http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-csharp-express|here]].\\ 

<WRAP center round tip 60%>
On Linux or OS X you can use [[http://mono-project.com|Mono]] to compile the C# project.
</WRAP>

The syntax used in C# is very similar to C<nowiki>++</nowiki> and Java. I will not walk you through the entire code but provide you with a project and show you how it works. You can then add GUI objects on you own and connect them to SGCT.
==== Step 2 ====
Open the project solution (.sln file) in the IDE (Microsoft Visual Studio). This application is a windows form application and consists of the following files:

  * Form1.cs
  * NetworkManager.cs
  * Other auto-generated files

If you double-click on Form1.cs in the solution explorer then a graphical representation (Design View) appears, but if you want to view the code simply right click and choose View Code. In the Design View you can drag items such as buttons, checkboxes, menus, etc. from the toolbox directly to the form. In the Properties section all settings for the selected item can be set. If the item is double-clicked then a callback function is created in the code. The toolbox may be hidden but will become visible once clicked. The image below show an overview over view of the project.\\ 
\\ 
{{:develop:sgcttutorials:c_sharp_overview.png|}}
\\ 
\\ 
The NetworkManager is a class that establishes a TCP client connection. It's in the simplest form and doesn't handle any received messages. It simply a communication source that sends messages to a server (sink) which in this case will be a SGCT application. The build-in external communication interface in SGCT separates messages by carriage return (CR) followed by a newline (NL) making it possible to test the communication using [[http://en.wikipedia.org/wiki/Telnet|telnet]]. CR and NL are expressed using the following characters in a string:
<code cpp>
"\r\n"
</code>

==== Step 3 ====
In the Form1 code there is a struct containing connection related objects.
<sxh cpp; first-line: 12; toolbar: false;>
    struct clientData
    {
        public NetworkManager connection;
        public string ip;
        public Int32 port;
        public int bufferSize;
    }
</sxh>
An object of the clientData struct is created as a member of the Form1 class.
<sxh cpp; first-line: 20; highlight: [22]; toolbar: false;>
    public partial class Form1 : Form
    {
        private clientData c;
</sxh>
When a connection is established you can simply send messages anywhere from the form class. The send function in the NetworkManager appends CR and NL. Sending a message is done by:

<code cpp>
c.connection.Send("Hello");
</code>

Every time a message is sent the SGCT application will call on the external control callback where you can parse the received message. This example will show you how to use four GUI elements in order to control the SGCT application. These elements will send different messages upon interaction. The list below shows the different GUI elements and what messages they can send.\\ 

  - CheckBox: Show statistics, Message: "stats=val" where val can be either 1 or 0
  - CheckBox: Show performance graph, Message: "graph=val" where val can be either 1 or 0
  - CheckBox: Show wireframe, Message: "wire=val" where val can be either 1 or 0
  - TrackBar: Set object size, Message: "size=val" where val can be an integer between 0 and 100.

To minimize the TCP traffic keep the messages as short as possible.
\\ 
\\ 
The connect/disconnect button is connected to the following callback:
<sxh cpp; first-line: 104; toolbar: false;>
        private void connectButton_Click(object sender, EventArgs e)
        {
            if (!c.connected)
            {
                //get the ip address string from the textbox 
                c.ip = this.ipTextBox.Text;

                connect();
            }
            else
            {
                disconnect();
            }
        }
</sxh>
Which triggers the following functions:
<sxh cpp; first-line: 62; toolbar: false;>
        private void connect()
        {
            //if connection successfull
            if (c.connection.ConnectIP(c.ip, c.port, c.bufferSize))
            {
                componentVisibility(true);
                this.connectButton.Text = "Disconnect";
                this.toolStripStatusLabel1.Text = "Connected";
                
                //send defaults
                c.connection.Send("stats=0\r\ngraph=0\r\nwire=0\r\nsize=50");
            }
            else
            {
                componentVisibility(false);
                this.connectButton.Text = "Connect";
                this.toolStripStatusLabel1.Text = "Disconnected";
            }
        }

        private void disconnect()
        {
            componentVisibility(false);
            this.connectButton.Text = "Connect";
            this.toolStripStatusLabel1.Text = "Disconnected";

            if (c.connection != null)
            {
                c.connection.valid = false;
                c.connection.Disconnect();
            }
        }
</sxh>

The group box containing all the GUI objects that interacts with SGCT is grayed out (disabled) when disconnected. The componentVisibility function enables/disables the groupbox depending on the status of the TCP connection. When connected interaction with SGCT is possible.

==== Step 4 ====
Enter the design mode and double-click on any of the GUI items in the Properties group box. This will take you directly to a callback for that GUI item. If a callback doesn't exist one will be created. This enables you to simply add new GUI items and extend the functionality of this application.

The callback code for all the items is pretty much the same, the value(s) from each item is interpreted and sent to the SGCT application.
<sxh cpp; first-line: 119; toolbar: false;>
        private void StatsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (c.connection.valid)
            {
                CheckBox cb = (CheckBox)sender;

                if (cb.Checked)
                    c.connection.Send("stats=1");
                else
                    c.connection.Send("stats=0");
            }
        }

        private void GraphCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (c.connection.valid)
            {
                CheckBox cb = (CheckBox)sender;

                if (cb.Checked)
                    c.connection.Send("graph=1");
                else
                    c.connection.Send("graph=0");
            }
        }

        private void WireframeCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (c.connection.valid)
            {
                CheckBox cb = (CheckBox)sender;

                if (cb.Checked)
                    c.connection.Send("wire=1");
                else
                    c.connection.Send("wire=0");
            }
        }

        private void SizeTrackBar_Scroll(object sender, EventArgs e)
        {
            TrackBar tb = (TrackBar)sender;
            this.SizeLabel.Text = "Size: " + tb.Value.ToString() + " %";

            if (c.connection.valid)
            {
                c.connection.Send("size=" + tb.Value.ToString());
            }
        }
</sxh>

==== Step 5 ====
Now, back to C<nowiki>++</nowiki>... This code is based on the [[develop:sgcttutorials:spinningtriangle:spinningtriangle|spinning triangle]] tutorial. Whats been added is two callbacks and some variables.
<code cpp>
void myPostSyncPreDrawFun();
void externalControlCallback(const char * receivedChars, int size, int clientId);

bool showStats = false;
bool showGraph = false;
bool showWireframe = false;
float size_factor = 0.5f;
</code>

The Post-Sync-Pre-Draw will apply the shared variables that changes properties in the engine:
<code cpp>
void myPostSyncPreDrawFun()
{
	gEngine->setDisplayInfoVisibility( showStats );
	gEngine->setStatsGraphVisibility( showGraph );
	gEngine->setWireframe( showWireframe );
}
</code>

Since we got more variables to share these must be added to the encoding end decoding callbacks as well.
<code cpp>
void myEncodeFun()
{
	sgct::SharedData::Instance()->writeDouble( curr_time );
	sgct::SharedData::Instance()->writeFloat( size_factor );
	sgct::SharedData::Instance()->writeBool( showStats );
	sgct::SharedData::Instance()->writeBool( showGraph );
	sgct::SharedData::Instance()->writeBool( showWireframe );
}

void myDecodeFun()
{
	curr_time = sgct::SharedData::Instance()->readDouble();
	size_factor = sgct::SharedData::Instance()->readFloat();
	showStats = sgct::SharedData::Instance()->readBool();
	showGraph = sgct::SharedData::Instance()->readBool();
	showWireframe = sgct::SharedData::Instance()->readBool();
}
</code>

In the external control callback the messages sent from the C# application (or telnet) will be parsed. To prevent NULL pointer errors the length of the received message will be checked as well (unnecessary in this case but a good practice if more complex messages will be added).
<code cpp>
void externalControlCallback(const char * receivedChars, int size, int clientId)
{
	if( gEngine->isMaster() )
	{
		if(size == 7 && strncmp(receivedChars, "stats", 5) == 0)
		{
			showStats = (strncmp(receivedChars + 6, "1", 1) == 0);
		}
		else if(size == 7 && strncmp(receivedChars, "graph", 5) == 0)
		{
			showGraph = (strncmp(receivedChars + 6, "1", 1) == 0);
		}
		else if(size == 6 && strncmp(receivedChars, "wire", 4) == 0)
		{
			showWireframe = (strncmp(receivedChars + 5, "1", 1) == 0);
		}
		else if(size >= 6 && strncmp(receivedChars, "size", 4) == 0)
		{
			//parse string to int
			int tmpVal = atoi(receivedChars + 5);
			//recalc percent to float
			size_factor = static_cast<float>(tmpVal)/100.0f;
		}
	}
}
</code>

The most important part is to connect the callbacks to the engine:
<sxh cpp; first-line: 20; highlight: [29,30]; toolbar: false;>
int main( int argc, char* argv[] )
{

	// Allocate
	gEngine = new sgct::Engine( argc, argv );

	// Bind your functions
	gEngine->setDrawFunction( myDrawFun );
	gEngine->setPreSyncFunction( myPreSyncFun );
	gEngine->setPostSyncPreDrawFunction( myPostSyncPreDrawFun );
	gEngine->setExternalControlCallback( externalControlCallback );
</sxh>

==== Step 6 ====
External control must be activated in the XML configuration file. Here also the port is specified (make sure it doesn't interfere with the node ports).
<sxh xml; first-line: 1; highlight: [2]; toolbar: false;>
<?xml version="1.0" ?>
<Cluster masterAddress="127.0.0.1" externalControlPort="20500">
	<Node ip="127.0.0.1" port="20401">
		<Window fullscreen="false" numberOfSamples="4">
</sxh>

In this example the localhost address is used but you can change that if you want to run the GUI on a separate computer. Just make sure your firewall is not blocking the application and port. Compile and start the two applications. When the SGCT application is running you can press the connect button in the GUI application. Now you should be able to control some of the properties in SGCT. Using this code as a base you can simply add more functionality such as changing the color etc.

==== Final code ====
<file xml single.xml>
<?xml version="1.0" ?>
<Cluster masterAddress="127.0.0.1" externalControlPort="20500">
	<Node ip="127.0.0.1" port="20401">
		<Window fullscreen="false" numberOfSamples="4">
			<Stereo type="none" />
			<Pos x="200" y="300" />
			<!-- 16:9 aspect ratio -->
			<Size x="640" y="360" />
		</Window>
		<Viewport>
			<Pos x="0.0" y="0.0" />
			<Size x="1.0" y="1.0" />
			<Viewplane>
				<!-- Lower left -->
				<Pos x="-1.778" y="-1.0" z="0.0" />
				<!-- Upper left -->
				<Pos x="-1.778" y="1.0" z="0.0" />
				<!-- Upper right -->
				<Pos x="1.778" y="1.0" z="0.0" />
			</Viewplane>
		</Viewport>
	</Node>
	<User eyeSeparation="0.069">
		<Pos x="0.0" y="0.0" z="4.0" />
	</User>
</Cluster>
</file>

<file cpp main.cpp>
#include "sgct.h"

sgct::Engine * gEngine;

void myDrawFun();
void myPreSyncFun();
void myEncodeFun();
void myDecodeFun();

double curr_time = 0.0;

void myPostSyncPreDrawFun();
void externalControlCallback(const char * receivedChars, int size, int clientId);

bool showStats = false;
bool showGraph = false;
bool showWireframe = false;
float size_factor = 0.5f;

int main( int argc, char* argv[] )
{

	// Allocate
	gEngine = new sgct::Engine( argc, argv );

	// Bind your functions
	gEngine->setDrawFunction( myDrawFun );
	gEngine->setPreSyncFunction( myPreSyncFun );
	gEngine->setPostSyncPreDrawFunction( myPostSyncPreDrawFun );
	gEngine->setExternalControlCallback( externalControlCallback );

	sgct::SharedData::Instance()->setEncodeFunction(myEncodeFun);
	sgct::SharedData::Instance()->setDecodeFunction(myDecodeFun);

	// Init the engine
	if( !gEngine->init() )
	{
		delete gEngine;
		return EXIT_FAILURE;
	}

	// Main loop
	gEngine->render();

	// Clean up (de-allocate)
	delete gEngine;

	// Exit program
	exit( EXIT_SUCCESS );
}

void myDrawFun()
{
	float speed = 50.0f;
	glRotatef(static_cast<float>( curr_time ) * speed, 0.0f, 1.0f, 0.0f);

	//render a single triangle
	glBegin(GL_TRIANGLES);
		glColor3f(1.0f, 0.0f, 0.0f); //Red
		glVertex3f(-0.5f * size_factor, -0.5f * size_factor, 0.0f);

		glColor3f(0.0f, 1.0f, 0.0f); //Green
		glVertex3f(0.0f, 0.5f * size_factor, 0.0f);

		glColor3f(0.0f, 0.0f, 1.0f); //Blue
		glVertex3f(0.5f * size_factor, -0.5f * size_factor, 0.0f);
	glEnd();
}

void myPreSyncFun()
{
	//set the time only on the master
	if( gEngine->isMaster() )
	{
		//get the time in seconds
		curr_time = sgct::Engine::getTime();
	}
}

void myPostSyncPreDrawFun()
{
	gEngine->setDisplayInfoVisibility( showStats );
	gEngine->setStatsGraphVisibility( showGraph );
	gEngine->setWireframe( showWireframe );
}

void myEncodeFun()
{
	sgct::SharedData::Instance()->writeDouble( curr_time );
	sgct::SharedData::Instance()->writeFloat( size_factor );
	sgct::SharedData::Instance()->writeBool( showStats );
	sgct::SharedData::Instance()->writeBool( showGraph );
	sgct::SharedData::Instance()->writeBool( showWireframe );
}

void myDecodeFun()
{
	curr_time = sgct::SharedData::Instance()->readDouble();
	size_factor = sgct::SharedData::Instance()->readFloat();
	showStats = sgct::SharedData::Instance()->readBool();
	showGraph = sgct::SharedData::Instance()->readBool();
	showWireframe = sgct::SharedData::Instance()->readBool();
}

void externalControlCallback(const char * receivedChars, int size, int clientId)
{
	if( gEngine->isMaster() )
	{
		if(size == 7 && strncmp(receivedChars, "stats", 5) == 0)
		{
			showStats = (strncmp(receivedChars + 6, "1", 1) == 0);
		}
		else if(size == 7 && strncmp(receivedChars, "graph", 5) == 0)
		{
			showGraph = (strncmp(receivedChars + 6, "1", 1) == 0);
		}
		else if(size == 6 && strncmp(receivedChars, "wire", 4) == 0)
		{
			showWireframe = (strncmp(receivedChars + 5, "1", 1) == 0);
		}
		else if(size >= 6 && strncmp(receivedChars, "size", 4) == 0)
		{
			//parse string to int
			int tmpVal = atoi(receivedChars + 5);
			//recalc percent to float
			size_factor = static_cast<float>(tmpVal)/100.0f;
		}
	}
}
</file>

The final code for the C# project is in {{:develop:sgcttutorials:sgctremote.zip|this zip}}.

==== Extra - Telnet usage ====
Telnet is a part of Microsoft Windows. However, since Windows 7 it's not installed as default. But you can add that by following this [[http://technet.microsoft.com/en-us/library/cc771275(v=ws.10).aspx|techdoc]]. When telnet is installed you can simply press "windows key + r" to open the Run window. Type "telnet 127.0.0.1 20500" and press enter. Make sure SGCT is running before you start telnet.
\\ \\
{{:develop:sgcttutorials:telnet_run.png|}}
\\ \\ 
Now you can type the same messages as in the C# application. Carriage return + New line is the same as pressing the enter/return key. SGCT can only handle one external control interface at once so you need to disconnect your C# application when you test this.
\\ \\ 
{{:develop:sgcttutorials:telnet.png|}}
\\ 

{{indexmenu_n>10}}
~~DISCUSSION:on~~
{{tag>Cluster C# C++ OpenGL VR GUI}}