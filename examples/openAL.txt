====== 3D Sound using OpenAL ======
<WRAP center round alert 60%>Update in progress: Updating samples and files to SGCT 1.5+ [2013-06-11]</WRAP>

This tutorial will demonstrate how to add positional 3D audio to your project. The OpenAL library has similar syntax as OpenGL but the difference is that you position audio sources in 3D space. It's also possible to add velocity to moving audio sources to create a Doppler effect. This example renders a hemisphere with the same dimensions as the dome in the visualization center. To simulate the dome viewports use the dome simulation configuration file from [[develop:sgct:configfiles:dome:dome|this page]]. The only difference is that the rendered dome has a field of view of 180 degrees instead of 165. However, this example can run in a different setup as well like in the VR-Arena.\\ 
\\ 
A smaller wireframe sphere is orbiting around the user. The small sphere acts as a 3D sound source looping a wav-file.
\\  
\\ 
Audio file: {{:develop:sgcttutorials:file1.wav|file1.wav}} //2012-09-13 01:00//
\\ \\ 
You will need to link the OpenAL lib and ALUT lib to your project. Also the include path to the OpenAL headers needs to be added.
\\ 
  * OpenAL SDK for windows (visual studio & MinGW): {{:develop:openal_1.1_sdk.zip|openal_1.1_sdk.zip}}
  * OpenAL documentation: {{:develop:sgcttutorials:openal_docs.zip|openal_docs.zip}}
\\ 
Mac users can download the {{:develop:alut-osx-universal.zip|ALUT framework}} and copy the contents of the zip file to your framework directory which is normally done using the following commands:

<code>
sudo cp -r ALUT.framework /System/Library/Frameworks/
sudo cp -r ALUT.framework.dSYM/ /System/Library/Frameworks/
</code>

Then add the following flags to your compiler, the order is important.

<code>
-framework ALUT -framework OpenAL
</code>

{{:develop:sgcttutorials:openal_example.png?800|}}\\ 
\\ 
==== Step 1 ====
First include the openAL headers.
<code cpp>
//include open AL
#ifdef __APPLE__
    #include <OpenAL/al.h>
    #include <ALUT/alut.h>
#else
    #include <AL/al.h>
    #include <AL/alut.h>
#endif
</code>
==== Step 2 ====
Declare global helper variables and a helper function. GLM will be used for vector calculations. In this example only one audio source and buffer will be used but it should be pretty straight forward add more sound sources.

<code cpp>
//OpenAL data & functions
void setAudioSource(ALuint &buffer,ALuint &source, char * filename);
ALuint audio_buffer0 = AL_NONE;
ALuint source0;
glm::vec4 audioPos;
</code>

To set up an audio context, connect the sound device and load files from file ALUT (Audio Library Utility Toolkit) will be used. The following function is used for loading a wav-file to a buffer and connect it to a sound source.

<code cpp>
void setAudioSource(ALuint &buffer, ALuint &source, char * filename)
{
	alGenBuffers(1, &buffer);
	alGenSources(1, &source);

	buffer = alutCreateBufferFromFile(filename);
	if( buffer == AL_NONE )
	{
		sgct::MessageHandler::Instance()->print("Failed to read audio file '%s', error: %s\n", filename, alutGetErrorString( alutGetError() ));
	}
	alSourcei(source, AL_BUFFER, buffer);
}
</code>

For a proper cleanup let's add a clean up callback to SGCT.

<code cpp>
void myCleanUpFun();
</code>

<code cpp>
void myCleanUpFun()
{
	alDeleteSources(1, &source0);
	alDeleteBuffers(1, &audio_buffer0);
	alutExit();
}
</code>
==== Step 3 ====
In the init OpenGL callback OpenAL can be initiated as well. Set the audio track to loop and start playing the audio immediately.
<code cpp>
void myInitOGLFun()
{
	alutInit(NULL, 0);

	//Check for errors if any
	sgct::MessageHandler::Instance()->print("ALUT init: %s\n", alutGetErrorString( alutGetError() ));

	setAudioSource(audio_buffer0, source0, "file1.wav");

	//set the listeners properties
	glm::vec3 userPos = gEngine->getUserPtr()->getPos();
	alListener3f(AL_POSITION, userPos.x, userPos.y, userPos.z);
	alListener3f(AL_VELOCITY, 0.0f, 0.0f, 0.0f);

	//set the audio source's properties
	alSourcef(source0, AL_PITCH, 1.0f);
	alSourcef(source0, AL_GAIN, 1.0f);
	alSource3f(source0, AL_POSITION, 0.0f, 0.0f, 0.0f);
	alSource3f(source0, AL_VELOCITY, 0.0f, 0.0f, 0.0f);
	//loop the sound track
	alSourcei(source0, AL_LOOPING, AL_TRUE);

	alSourcePlay(source0);
}
</code>  
==== Step 4 ====
The position of the audio source will just be calculated once. Therefore, the calculations will take place in the post-sync-pre-draw callback. If the calculation would take place in the draw callback then it might get called several times per frame.

<code cpp>
void myPostSyncPreDrawFun()
{
	float angle = glm::radians( static_cast<float>( curr_time ) * speed );
	glm::vec4 p;
	p.x = objectRadius * sinf(angle);
	p.z = objectRadius * cosf(angle);
	p.y = 2.0f;

	glm::mat4 rotMat = glm::mat4(1.0f);
	rotMat = glm::rotate( rotMat, -26.7f, glm::vec3(1.0f, 0.0f, 0.0f ) );
	audioPos = rotMat * p;

	alSource3f(source0, AL_POSITION, audioPos.x, audioPos.y, audioPos.z);
}
</code>

Then the graphical representation of sound source will be rendered in the draw callback using the same position vector. This example uses a quadric to draw the wireframe sphere and the declaration looks like this:

<note important>Quadrics are not very efficient for rendering so if you plan to use a lot of spheres, use vertex arrays or vertex buffer objects instead.</note>

<code cpp>
GLUquadricObj *quadratic;
</code>

The quadric is generated in the init OpenGL callback.

<sxh cpp; first-line: 69; highlight: [74,75]; toolbar: false;>
void myInitOGLFun()
{
	glEnable( GL_DEPTH_TEST );

	//generate quadric
	quadratic=gluNewQuadric();
	gluQuadricDrawStyle(quadratic, GLU_LINE);

	alutInit(NULL, 0);
</sxh>

The drawing callback renders the quadric and the hemisphere dome structure.

<code cpp>
void myDrawFun()
{
	glLineWidth(2.0f);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glPushMatrix();
		glTranslatef(audioPos.x, audioPos.y, audioPos.z);
		glColor4f(1.0f, 0.4f, 0.1f, 0.8f);
		gluSphere(quadratic, 0.5f, 8, 8);
	glPopMatrix();

	glPushMatrix();
		glRotatef( -26.7f, 1.0f, 0.0f, 0.0f );
		drawDome();
	glPopMatrix();

	glDisable(GL_BLEND);
}
</code>
==== Final code ====

<file cpp main.cpp>
#include "sgct.h"

//include open AL
#ifdef __APPLE__
    #include <OpenAL/al.h>
    #include <ALUT/alut.h>
#else
    #include <AL/al.h>
    #include <AL/alut.h>
#endif

sgct::Engine * gEngine;

//callbacks
void myInitOGLFun();
void myDrawFun();
void myPreSyncFun();
void myPostSyncPreDrawFun();
void myEncodeFun();
void myDecodeFun();
void myCleanUpFun();

//other functions
void drawDome();
void setAudioSource(ALuint &buffer,ALuint &source, const char * filename);

//open AL data
ALuint audio_buffer0 = AL_NONE;
ALuint source0;
glm::vec4 audioPos;

//pther variables
double curr_time = 0.0;
float speed = 25.0f;
float radius = 7.4f;
float objectRadius = 5.0f;
float PI = 3.141592654f;
GLUquadricObj *quadratic;

int main( int argc, char* argv[] )
{
	gEngine = new sgct::Engine( argc, argv );

	// Bind your functions
	gEngine->setInitOGLFunction( myInitOGLFun );
	gEngine->setDrawFunction( myDrawFun );
	gEngine->setPreSyncFunction( myPreSyncFun );
	gEngine->setPostSyncPreDrawFunction( myPostSyncPreDrawFun );
	gEngine->setCleanUpFunction( myCleanUpFun );
	sgct::SharedData::Instance()->setEncodeFunction(myEncodeFun);
	sgct::SharedData::Instance()->setDecodeFunction(myDecodeFun);

	if( !gEngine->init() )
	{
		delete gEngine;
		return EXIT_FAILURE;
	}

	// Main loop
	gEngine->render();

	// Clean up
	delete gEngine;

	// Exit program
	exit( EXIT_SUCCESS );
}

void myInitOGLFun()
{
	glEnable( GL_DEPTH_TEST );

	//generate quadric
	quadratic=gluNewQuadric();
	gluQuadricDrawStyle(quadratic, GLU_LINE);

	alutInit(NULL, 0);

	//Check for errors if any
	sgct::MessageHandler::Instance()->print("ALUT init: %s\n", alutGetErrorString( alutGetError() ));

	setAudioSource(audio_buffer0, source0, "file1.wav");

	glm::vec3 userPos = gEngine->getUserPtr()->getPos();
	alListener3f(AL_POSITION, userPos.x, userPos.y, userPos.z);
	alListener3f(AL_VELOCITY, 0.0f, 0.0f, 0.0f);

	alSourcef(source0, AL_PITCH, 1.0f);
	alSourcef(source0, AL_GAIN, 1.0f);
	alSource3f(source0, AL_POSITION, 0.0f, 0.0f, 0.0f);
	alSource3f(source0, AL_VELOCITY, 0.0f, 0.0f, 0.0f);
	alSourcei(source0, AL_LOOPING, AL_TRUE);

	alSourcePlay(source0);
}

void myPostSyncPreDrawFun()
{
	float angle = glm::radians( static_cast<float>( curr_time ) * speed );
	glm::vec4 p;
	p.x = objectRadius * sinf(angle);
	p.z = objectRadius * cosf(angle);
	p.y = 2.0f;

	glm::mat4 rotMat = glm::mat4(1.0f);
	rotMat = glm::rotate( rotMat, -26.7f, glm::vec3(1.0f, 0.0f, 0.0f ) );
	audioPos = rotMat * p;

	alSource3f(source0, AL_POSITION, audioPos.x, audioPos.y, audioPos.z);
}

void myDrawFun()
{
	glLineWidth(2.0f);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glPushMatrix();
		glTranslatef(audioPos.x, audioPos.y, audioPos.z);
		glColor4f(1.0f, 0.4f, 0.1f, 0.8f);
		gluSphere(quadratic, 0.5f, 8, 8);
	glPopMatrix();

	glPushMatrix();
		glRotatef( -26.7f, 1.0f, 0.0f, 0.0f );
		drawDome();
	glPopMatrix();

	glDisable(GL_BLEND);
}

void drawDome()
{
	float x, y, z;

	glColor4f(0.1f, 0.2f, 1.0f, 0.5f);

	//draw latitude
	for(float theta=PI/2.0f; theta > 0.0f; theta -= (PI/40.0f))
	{
		glBegin(GL_LINE_LOOP);

		y = radius * cosf( theta );
		for(float phi=0.0f; phi < (PI*2.0f); phi += (PI/40.0f))
		{
			x = radius * sinf( theta ) * cosf( phi );
			z = radius * sinf( theta ) * sinf( phi );

			glVertex3f(x, y, z);
		}
		glEnd();
	}

	//draw longitude
	for(float phi=0.0f; phi < (PI*2.0f); phi += (PI/40.0f))
	{
		glBegin(GL_LINE_STRIP);

		for(float theta=PI/2.0f; theta > 0.0f; theta -= (PI/40.0f))
		{
			x = radius * sinf( theta ) * cosf( phi );
			y = radius * cosf( theta );
			z = radius * sinf( theta ) * sinf( phi );
			glVertex3f(x, y, z);
		}

		glEnd();
	}
}

void myPreSyncFun()
{
	//set the time only on the master
	if( gEngine->isMaster() )
	{
		//get the time in seconds
		curr_time = sgct::Engine::getTime();
	}
}

void myEncodeFun()
{
	sgct::SharedData::Instance()->writeDouble( curr_time );
}

void myDecodeFun()
{
	curr_time = sgct::SharedData::Instance()->readDouble();
}

void myCleanUpFun()
{
	alDeleteSources(1, &source0);
	alDeleteBuffers(1, &audio_buffer0);
	alutExit();
}

void setAudioSource(ALuint &buffer, ALuint &source, const char * filename)
{
	alGenBuffers(1, &buffer);
	alGenSources(1, &source);

	buffer = alutCreateBufferFromFile(filename);
	if( buffer == AL_NONE )
	{
		sgct::MessageHandler::Instance()->print("Failed to read audio file '%s', error: %s\n", filename, alutGetErrorString( alutGetError() ));
	}
	alSourcei(source, AL_BUFFER, buffer);
}
</file>

{{indexmenu_n>11}}
~~DISCUSSION:on~~
{{tag>Cluster C++ OpenAL OpenGL VR Sound WAV Multi-channel}}