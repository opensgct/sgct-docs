====== Simple navigation ======
<WRAP center round alert 60%>Update in progress: Updating samples and files to SGCT 1.5+ [2013-06-11]</WRAP>

This tutorial will demonstrate how to use the [[http://glm.g-truc.net/|OpenGL mathematics library (GLM)]] to implement a simple [[http://en.wikipedia.org/wiki/First-person_shooter|first person shooter (fps)]] camera. GLM is a part of the SGCT library. Keyboard and mouse is used to navigate the virtual world. This tutorial can also be merged with the [[develop:sgcttutorials:gamepad:gamepad|gamepad/joystick tutorial]].\\ 
\\ 
GLM documentation: [[http://glm.g-truc.net/api/index.html|GLM documentation]]\\ 
GLM manual: {{:develop:glm.pdf|GLM manual}}\\ 
 
{{:develop:sgcttutorials:simple_navigation.png?direct&|}}\\ 
\\  
\\ 
**Controls:**
  * Forward - W/up arrow key
  * Backward - S/down arrow key
  * Strafe left - A/left arrow key
  * Strafe right - D/right arrow key
  * Pan camera - Hold left mouse button and move mouse pointer in x-direction.
  * Exit - Esc
\\ 
==== Step 1 ====
Depending on which GLM functionality you want to use, you must include suitable GLM headers. In this case the following will be used.
<code cpp>
#include "sgct.h"
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>
</code>

==== Step 2 ====
Like previous tutorials a sgct::Engine pointer must be created and the following callbacks. The input callbacks are wrappers for GLFW’s input callbacks and for deeper understanding please look in the GLFW’s {{:develop:glfw_usersguide.pdf|user’s guide}} and {{:develop:glfw_reference.pdf|reference}}.
<code cpp>
sgct::Engine * gEngine;

void myDrawFun();
void myPreSyncFun();
void myInitOGLFun();
void myEncodeFun();
void myDecodeFun();
//input callbacks
void keyCallback(int key, int action);
void mouseButtonCallback(int button, int action);
</code>
==== Step 3 ====
Let’s create a “sandbox” with some reference objects to test the navigation. To do achieve this, draw a grid which will act as a landscape and populate it with pyramids.\\ \\ 
**Declaration:**
<code cpp>
void drawXZGrid(int size, float yPos);
void drawPyramid(float width);
</code>
**Implementation:**
<code cpp>
void drawXZGrid(int size, float yPos)
{
	glPushMatrix();
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glTranslatef(0.0f, yPos, 0.0f);

	glLineWidth(3.0f);
	glColor4f(1.0f, 1.0f, 1.0f, 0.8f);

	glBegin( GL_LINES );
	for(int x = -(size/2); x < (size/2); x++)
	{
		glVertex3i(x, 0, -(size/2));
		glVertex3i(x, 0, (size/2));
	}

	for(int z = -(size/2); z < (size/2); z++)
	{
		glVertex3i(-(size/2), 0, z);
		glVertex3i((size/2), 0, z);
	}
	glEnd();

	glDisable(GL_BLEND);
	glPopMatrix();
}

void drawPyramid(float width)
{
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	//disable depth sorting to avoid flickering
	glDisable(GL_DEPTH_TEST);

	glColor4f(1.0f, 0.0f, 0.5f, 0.6f);

	glBegin(GL_TRIANGLE_FAN);
	//draw top
	glVertex3f(0.0f, 2.0f, 0.0f);

	//draw sides
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);

	glEnd();

	//enhance the pyramids with lines in the edges
	glLineWidth(2.0f);
	glColor4f(1.0f, 0.0f, 0.5f, 0.8f);

	glBegin(GL_LINE_LOOP);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glEnd();

	glEnable(GL_DEPTH_TEST);
	glDisable(GL_BLEND);
}
</code>
==== Step 4 ====
Now use the functions created above to generate a display list that can be called in the rendering loop.
<code cpp>
GLuint myLandscapeDisplayList = 0;
const int landscapeSize = 50;
const int numberOfPyramids = 150;

void myInitOGLFun()
{
	//create and compile display list
	myLandscapeDisplayList = glGenLists(1);
	glNewList(myLandscapeDisplayList, GL_COMPILE);

	drawXZGrid(landscapeSize, -1.5f);

	//pick a seed for the random function (must be same on all nodes)
	srand(9745);
	for(int i=0; i<numberOfPyramids; i++)
	{
		float xPos = static_cast<float>(rand()%landscapeSize - landscapeSize/2);
		float zPos = static_cast<float>(rand()%landscapeSize - landscapeSize/2);

		glPushMatrix();
		glTranslatef(xPos, -1.5f, zPos);
		drawPyramid(0.6f);
		glPopMatrix();
	}

	glEndList();
}
</code>
==== Step 5 ====
Create an array of booleans to keep track of which keys that are pressed write a callback function for the keyboard.
<code cpp>
bool arrowButtons[4];
enum directions { FORWARD = 0, BACKWARD, LEFT, RIGHT };
</code>
<code cpp>
void keyCallback(int key, int action)
{
	if( gEngine->isMaster() )
	{
		switch( key )
		{
		case GLFW_KEY_UP:
		case 'W':
			arrowButtons[FORWARD] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_DOWN:
		case 'S':
			arrowButtons[BACKWARD] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_LEFT:
		case 'A':
			arrowButtons[LEFT] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_RIGHT:
		case 'D':
			arrowButtons[RIGHT] = (action == GLFW_PRESS ? true : false);
			break;
		}
	}
}
</code>

==== Step 6 ====
The camera pan (rotation around the y-axis) will be based on the mouse x-coordinate difference (dx) when the left mouse button is pressed. To track this we need some variables.
<code cpp>
//to check if left mouse button is pressed
bool mouseLeftButton = false;
/* Holds the difference in position between when the left mouse button
    is pressed and when the mouse button is held. */
int mouseDx = 0;
/* Stores the positions that will be compared to measure the difference. */
int mouseXPos[] = { 0, 0 };
</code>
\\ 
Now implement the following in a mouse button callback.
<code cpp>
void mouseButtonCallback(int button, int action)
{
	if( gEngine->isMaster() )
	{
		switch( button )
		{
		case GLFW_MOUSE_BUTTON_LEFT:
			mouseLeftButton = (action == GLFW_PRESS ? true : false);
			int tmpYPos;
			//set refPos
			sgct::Engine::getMousePos( &mouseXPos[1], &tmpYPos );
			break;
		}
	}
}
</code>
The navigation model used in this tutorial is based on constant speed and therefore the walking and panning/rotation speed needs to be set (global variables). 
<code cpp>
float rotationSpeed = 0.1f;
float walkingSpeed = 2.5f;
</code>
The mouse and keyboard actions will be used to calculate a transformation matrix. This matrix will be synchronized to all cluster nodes. The pre sync function is called before the synchronization so implement the following in your pre sync callback:
<sxh cpp; first-line: 103; toolbar: false;>
void myPreSyncFun()
{
	if( gEngine->isMaster() )
	{
		if( mouseLeftButton )
		{
			int tmpYPos;
			sgct::Engine::getMousePos( &mouseXPos[0], &tmpYPos );
			mouseDx = mouseXPos[0] - mouseXPos[1];
		}
		else
		{
			mouseDx = 0;
		}

		static float panRot = 0.0f;
		panRot += (static_cast<float>(mouseDx) * rotationSpeed * static_cast<float>(gEngine->getDt()));
</sxh>
==== Step 7 ====
Now let’s do some math. Declare the following:
<code cpp>
glm::vec3 view(0.0f, 0.0f, 1.0f);
glm::vec3 up(0.0f, 1.0f, 0.0f);
glm::vec3 pos(0.0f, 0.0f, 0.0f);
glm::mat4 xform(1.0f);
</code>
In the pre sync function add this code to calculate a 4x4 rotation matrix.
<sxh cpp; first-line: 121; toolbar: false;>
glm::mat4 ViewRotateX = glm::rotate(
			glm::mat4(1.0f),
			panRot,
			glm::vec3(0.0f, 1.0f, 0.0f)); //rotation around the y-axis
</sxh>
<note tip>Look also at [[http://glm.g-truc.net/api/a00164.html|glm::yawPitchRoll]] if you want to implement a slightly more advanced camera.</note>
When the world is rotated then the view (forward vector) direction must be rotated with the same amount in the opposite direction. 
<sxh cpp; first-line: 126; toolbar: false;>
		view = glm::inverse(glm::mat3(ViewRotateX)) * glm::vec3(0.0f, 0.0f, 1.0f);
</sxh>
To get the side vector (strafe direction) calculate the cross product between the view vector and up vector.
<sxh cpp; first-line: 128; toolbar: false;>
		glm::vec3 right = glm::cross(view, up);
</sxh>
Calculate the new position (translation vector) based on the keyboard inputs by:
<sxh cpp; first-line: 130; toolbar: false;>
		if( arrowButtons[FORWARD] )
			pos += (walkingSpeed * static_cast<float>(gEngine->getDt()) * view);
		if( arrowButtons[BACKWARD] )
			pos -= (walkingSpeed * static_cast<float>(gEngine->getDt()) * view);
		if( arrowButtons[LEFT] )
			pos -= (walkingSpeed * static_cast<float>(gEngine->getDt()) * right);
		if( arrowButtons[RIGHT] )
			pos += (walkingSpeed * static_cast<float>(gEngine->getDt()) * right);
</sxh>
Now the total transformation matrix can be calculated. A first person shooter camera rotates the objects around the VR user’s head. Normally the user (specified in the xml-configuration file) is not located in the coordinate system origin. What needs to be done is the following.
  - Transform the user’s head to (0,0,0)
  - Apply the transformation
  - Transform the user back
This is done by using the following code:
<sxh cpp; first-line: 139; toolbar: false;>
		/*
			To get a first person camera, the world needs
			to be transformed around the users head.

			This is done by:
			1, Transform the user to coordinate system origin
			2, Apply transformation
			3, Transform the user back to original position

			However, mathwise this process need to be reversed
			due to the matrix multiplication order.
		*/

		//3. transform user back to original position
		xform = glm::translate( glm::mat4(1.0f), sgct::Engine::getUserPtr()->getPos() );
		//2. apply transformation
		xform *= (ViewRotateX * glm::translate( glm::mat4(1.0f), pos ));
		//1. transform user to coordinate system origin
		xform *= glm::translate( glm::mat4(1.0f), -sgct::Engine::getUserPtr()->getPos() );
	}
}
</sxh>
==== Step 8 ====
Now add a draw function callback:
<code cpp>
void myDrawFun()
{
	glLoadMatrixf(glm::value_ptr(xform));
	glCallList(myLandscapeDisplayList);
}
</code>

==== Step 9 ====
Synchronize the transform matrix across the cluster.
<code cpp>
void myEncodeFun()
{
	for(int i=0; i<16; i++)
		sgct::SharedData::Instance()->writeFloat( glm::value_ptr(xform)[i] );
}

void myDecodeFun()
{
	for(int i=0; i<16; i++)
		glm::value_ptr(xform)[i] = sgct::SharedData::Instance()->readFloat();
}
</code>

==== Step 10 ====
Bind all callbacks to the Engine.

==== Final code ====
<file cpp main.cpp>
#include "sgct.h"
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/matrix_transform.hpp>

sgct::Engine * gEngine;

void myDrawFun();
void myPreSyncFun();
void myInitOGLFun();
void myEncodeFun();
void myDecodeFun();
//input callbacks
void keyCallback(int key, int action);
void mouseButtonCallback(int button, int action);

void drawXZGrid(int size, float yPos);
void drawPyramid(float width);

float rotationSpeed = 0.1f;
float walkingSpeed = 2.5f;

GLuint myLandscapeDisplayList = 0;
const int landscapeSize = 50;
const int numberOfPyramids = 150;

bool arrowButtons[4];
enum directions { FORWARD = 0, BACKWARD, LEFT, RIGHT };

//to check if left mouse button is pressed
bool mouseLeftButton = false;
/* Holds the difference in position between when the left mouse button
    is pressed and when the mouse button is held. */
int mouseDx = 0;
/* Stores the positions that will be compared to measure the difference. */
int mouseXPos[] = { 0, 0 };

glm::vec3 view(0.0f, 0.0f, 1.0f);
glm::vec3 up(0.0f, 1.0f, 0.0f);
glm::vec3 pos(0.0f, 0.0f, 0.0f);
glm::mat4 xform(1.0f);

int main( int argc, char* argv[] )
{
	gEngine = new sgct::Engine( argc, argv );

	gEngine->setInitOGLFunction( myInitOGLFun );
	gEngine->setDrawFunction( myDrawFun );
	gEngine->setPreSyncFunction( myPreSyncFun );
	gEngine->setKeyboardCallbackFunction( keyCallback );
	gEngine->setMouseButtonCallbackFunction( mouseButtonCallback );

	for(int i=0; i<4; i++)
		arrowButtons[i] = false;

	if( !gEngine->init() )
	{
		delete gEngine;
		return EXIT_FAILURE;
	}

	sgct::SharedData::Instance()->setEncodeFunction( myEncodeFun );
	sgct::SharedData::Instance()->setDecodeFunction( myDecodeFun );

	// Main loop
	gEngine->render();

	// Clean up
	glDeleteLists(myLandscapeDisplayList, 1);
	delete gEngine;

	// Exit program
	exit( EXIT_SUCCESS );
}

void myInitOGLFun()
{
	//create and compile display list
	myLandscapeDisplayList = glGenLists(1);
	glNewList(myLandscapeDisplayList, GL_COMPILE);

	drawXZGrid(landscapeSize, -1.5f);

	//pick a seed for the random function (must be same on all nodes)
	srand(9745);
	for(int i=0; i<numberOfPyramids; i++)
	{
		float xPos = static_cast<float>(rand()%landscapeSize - landscapeSize/2);
		float zPos = static_cast<float>(rand()%landscapeSize - landscapeSize/2);

		glPushMatrix();
		glTranslatef(xPos, -1.5f, zPos);
		drawPyramid(0.6f);
		glPopMatrix();
	}

	glEndList();
}

void myPreSyncFun()
{
	if( gEngine->isMaster() )
	{
		if( mouseLeftButton )
		{
			int tmpYPos;
			sgct::Engine::getMousePos( &mouseXPos[0], &tmpYPos );
			mouseDx = mouseXPos[0] - mouseXPos[1];
		}
		else
		{
			mouseDx = 0;
		}

		static float panRot = 0.0f;
		panRot += (static_cast<float>(mouseDx) * rotationSpeed * static_cast<float>(gEngine->getDt()));

		glm::mat4 ViewRotateX = glm::rotate(
			glm::mat4(1.0f),
			panRot,
			glm::vec3(0.0f, 1.0f, 0.0f)); //rotation around the y-axis

		view = glm::inverse(glm::mat3(ViewRotateX)) * glm::vec3(0.0f, 0.0f, 1.0f);

		glm::vec3 right = glm::cross(view, up);

		if( arrowButtons[FORWARD] )
			pos += (walkingSpeed * static_cast<float>(gEngine->getDt()) * view);
		if( arrowButtons[BACKWARD] )
			pos -= (walkingSpeed * static_cast<float>(gEngine->getDt()) * view);
		if( arrowButtons[LEFT] )
			pos -= (walkingSpeed * static_cast<float>(gEngine->getDt()) * right);
		if( arrowButtons[RIGHT] )
			pos += (walkingSpeed * static_cast<float>(gEngine->getDt()) * right);

		/*
			To get a first person camera, the world needs
			to be transformed around the users head.

			This is done by:
			1, Transform the user to coordinate system origin
			2, Apply transformation
			3, Transform the user back to original position

			However, mathwise this process need to be reversed
			due to the matrix multiplication order.
		*/

		//3. transform user back to original position
		xform = glm::translate( glm::mat4(1.0f), sgct::Engine::getUserPtr()->getPos() );
		//2. apply transformation
		xform *= (ViewRotateX * glm::translate( glm::mat4(1.0f), pos ));
		//1. transform user to coordinate system origin
		xform *= glm::translate( glm::mat4(1.0f), -sgct::Engine::getUserPtr()->getPos() );
	}
}

void myDrawFun()
{
	glMultMatrixf(glm::value_ptr(xform));
	glCallList(myLandscapeDisplayList);
}

void myEncodeFun()
{
	for(int i=0; i<16; i++)
		sgct::SharedData::Instance()->writeFloat( glm::value_ptr(xform)[i] );
}

void myDecodeFun()
{
	for(int i=0; i<16; i++)
		glm::value_ptr(xform)[i] = sgct::SharedData::Instance()->readFloat();
}

void keyCallback(int key, int action)
{
	if( gEngine->isMaster() )
	{
		switch( key )
		{
		case GLFW_KEY_UP:
		case 'W':
			arrowButtons[FORWARD] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_DOWN:
		case 'S':
			arrowButtons[BACKWARD] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_LEFT:
		case 'A':
			arrowButtons[LEFT] = (action == GLFW_PRESS ? true : false);
			break;

		case GLFW_KEY_RIGHT:
		case 'D':
			arrowButtons[RIGHT] = (action == GLFW_PRESS ? true : false);
			break;
		}
	}
}

void mouseButtonCallback(int button, int action)
{
	if( gEngine->isMaster() )
	{
		switch( button )
		{
		case GLFW_MOUSE_BUTTON_LEFT:
			mouseLeftButton = (action == GLFW_PRESS ? true : false);
			int tmpYPos;
			//set refPos
			sgct::Engine::getMousePos( &mouseXPos[1], &tmpYPos );
			break;
		}
	}
}

void drawXZGrid(int size, float yPos)
{
	glPushMatrix();
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glTranslatef(0.0f, yPos, 0.0f);

	glLineWidth(3.0f);
	glColor4f(1.0f, 1.0f, 1.0f, 0.8f);

	glBegin( GL_LINES );
	for(int x = -(size/2); x < (size/2); x++)
	{
		glVertex3i(x, 0, -(size/2));
		glVertex3i(x, 0, (size/2));
	}

	for(int z = -(size/2); z < (size/2); z++)
	{
		glVertex3i(-(size/2), 0, z);
		glVertex3i((size/2), 0, z);
	}
	glEnd();

	glDisable(GL_BLEND);
	glPopMatrix();
}

void drawPyramid(float width)
{
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	//disable depth sorting to avoid flickering
	glDisable(GL_DEPTH_TEST);

	glColor4f(1.0f, 0.0f, 0.5f, 0.6f);

	glBegin(GL_TRIANGLE_FAN);
	//draw top
	glVertex3f(0.0f, 2.0f, 0.0f);

	//draw sides
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);

	glEnd();

	//enhance the pyramids with lines in the edges
	glLineWidth(2.0f);
	glColor4f(1.0f, 0.0f, 0.5f, 0.8f);

	glBegin(GL_LINE_LOOP);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(-width/2.0f, 0.0f, width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(width/2.0f, 0.0f, width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glEnd();

	glBegin(GL_LINE_LOOP);
	glVertex3f(width/2.0f, 0.0f, -width/2.0f);
	glVertex3f(0.0f, 2.0f, 0.0f);
	glVertex3f(-width/2.0f, 0.0f, -width/2.0f);
	glEnd();

	glEnable(GL_DEPTH_TEST);
	glDisable(GL_BLEND);
}
</file>

{{indexmenu_n>7}}
~~DISCUSSION:on~~
{{tag>Cluster C++ OpenGL VR GLM Math Navigation Camera}}